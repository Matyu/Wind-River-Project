#!/usr/bin/python
# -*- coding:Utf-8  -*

#Programme python pour arduino

import sys
from PyQt4 import QtGui
from PyQt4 import QtCore
import serial
import time

tm = time.clock()
tm2 = time.clock()


ser = serial.Serial('/dev/ttyACM0', 115200)
app = QtGui.QApplication(sys.argv)

main_window = QtGui.QWidget()
main_window.resize(500, 400)
main_window.setWindowTitle("Interface GUI pour controler carte Arduino")

lab1 = QtGui.QLabel("90 D", main_window)
lab2 = QtGui.QLabel("90 D", main_window)

lab1.move(300,80)
lab2.move(130,210)

sld_hb = QtGui.QSlider(QtCore.Qt.Horizontal, main_window)
sld_dg = QtGui.QSlider(QtCore.Qt.Vertical, main_window)

sld_hb.setGeometry(10, 140, 250, 50)
sld_dg.setGeometry(265, 15, 50, 250)

axe_x = QtGui.QLabel(main_window)
axe_y = QtGui.QLabel(main_window)
sld_hb.setValue(50)
sld_dg.setValue(50)

reset = QtGui.QPushButton("Reset", main_window)
reset.move(25, 200)

cmd = QtGui.QLineEdit(main_window)
cmd.setGeometry(10,300, 300, 40)


send = QtGui.QPushButton("Send", main_window)
send.move(330, 310)

def rst():
    sld_hb.setValue(50)
    sld_dg.setValue(50)

def sender(): 
    string = cmd.text()
    if not ser.isOpen():
        ser.open()
    string = string + "\n"
    cmd.setText(" ")
    ser.write(string)

def val_axe__changed(val):
    global tm2
    tm_local = time.clock()
    val = float(val)
    a = val * 180.0 / 100.0
    a = int(a)
    a = 180 - a
    lab2.setText(str(a) + " D")
    if tm_local - tm2 > 0.03:
        string = ';' + str(a) + "\n"
        if not ser.isOpen():
            ser.open()
        ser.write(string)
        tm2 = time.clock()

def val_axe_changed(val):
    global tm
    tm_local = time.clock()
    val = float(val)
    a = val * 180.0 / 100.0
    a = int(a)
    lab1.setText(str(a) + " D")
    if tm_local- tm > 0.03:
        string = str(a) + ";" + "\n"
        if not ser.isOpen():
            ser.open()
        ser.write(string)
        tm = time.clock()

def val_axe_changed_():
    val = sld_dg.value()
    val = float(val)
    a = val * 180.0 / 100.0
    a = int(a)
    lab1.setText(str(a) + " D")
    string = str(a) + ';' + "\n"
    if not ser.isOpen():
        ser.open()
    ser.write(string)

def val_axe__changed_():
    val = sld_hb.value()
    val = float(val)
    a = val * 180.0 / 100.0 
    a = int(a)
    a = 180 - a
    lab2.setText(str(a) + " D")
    string = ';' + str(a) + "\n"
    if not ser.isOpen():
        ser.open()
    ser.write(string)

    
QtCore.QObject.connect(sld_dg, QtCore.SIGNAL('sliderReleased()'), val_axe_changed_)
QtCore.QObject.connect(sld_hb, QtCore.SIGNAL('sliderReleased()'), val_axe__changed_)
QtCore.QObject.connect(sld_dg, QtCore.SIGNAL('valueChanged(int)'), val_axe_changed)
QtCore.QObject.connect(sld_hb, QtCore.SIGNAL('valueChanged(int)'), val_axe__changed)
QtCore.QObject.connect(send, QtCore.SIGNAL('clicked()'), sender)
QtCore.QObject.connect(reset, QtCore.SIGNAL('clicked()'), rst)

main_window.show()

def close():
    ser.close()
    return app.exec_()


sys.exit(close())

